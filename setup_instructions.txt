# Setup Instructions for Gemini Image Generator MCP Server

## 1. Update your Claude Desktop Configuration

Add the following entry to your Claude desktop configuration file at:
`C:\Users\Max\AppData\Roaming\Claude\claude_desktop_config.json`

In the "mcpServers" section, add:

```json
"gemini-images": {
    "command": "node",
    "args": ["G:\\MCP02\\dist\\index.js"],
    "env": {
        "GEMINI_API_KEY": "YOUR_GEMINI_API_KEY_HERE"
    }
}
```

Replace "YOUR_GEMINI_API_KEY_HERE" with your actual Gemini API key.

## 2. Final Configuration File

Your complete claude_desktop_config.json should look similar to this (with your new entry added):

```json
{
    "mcpServers": {
        "filesystem": {
            "command": "npx",
            "args": [
                "-y",
                "@modelcontextprotocol/server-filesystem",
                "C:\\Users\\Max\\Desktop",
                "G:\\mcp-projects"
            ]
        },
        "brave-search": {
            "command": "npx",
            "args": [
                "-y",
                "@modelcontextprotocol/server-brave-search"
            ],
            "env": {
                "BRAVE_API_KEY": "BSAzpp4l-TbJ0pizXWCRdZSSDcS2LYi"
            }
        },
        "everart": {
            "command": "npx",
            "args": ["-y", "@modelcontextprotocol/server-everart"],
            "env": {
                "EVERART_API_KEY": "everart-YRCIKOCJ7d8uvQF_uyk3lUSpG05NW2gpEfa4Vnui1EI"
            }
        },
        "weather": {
            "command": "node",
            "args": [
                "G:\\mcp01-server\\dist\\weatherServer.js"
            ]
        },
        "fetch": {
            "command": "node",
            "args": [
                "G:\\fetch-mcp\\dist\\index.js"
            ]
        },
        "discord": {
            "command": "node",
            "args": ["G:\\discordmcp\\build\\index.js"],
            "env": {
                "DISCORD_TOKEN": "MTM1ODM1MTk4NjQ0NTEyNzgyMg.GpD7bK.XJndzbu60rFteWsigiSZKg3pXzFaXC1TWcFmZo"
            }
        },
        "gemini-images": {
            "command": "node",
            "args": ["G:\\MCP02\\dist\\index.js"],
            "env": {
                "GEMINI_API_KEY": "YOUR_GEMINI_API_KEY_HERE"
            }
        }
    }
}
```

## 3. Using the Gemini Image Generator in Claude

After saving the configuration and restarting Claude Desktop, you can use the Gemini image generator by asking Claude to:

"Generate an image of [your prompt] using Gemini"

Claude will use the gemini-images MCP server to generate the image based on your prompt.

## Important Notes

1. This implementation uses the experimental `gemini-2.0-flash-exp-image-generation` model, which is only available in the beta API.

2. The code uses TypeScript `@ts-ignore` comments to bypass type checking for the beta API features that aren't officially documented in the type definitions.

3. If the API changes, you may need to update the code to match new beta API requirements.

4. Images are saved to the 'output' directory by default, and the file paths are returned in the tool response.

# Setup Instructions for Gemini Thinking Generator MCP Server

## 1. Update your Claude Desktop Configuration

Add the following entry to your Claude desktop configuration file at:
`C:\Users\Max\AppData\Roaming\Claude\claude_desktop_config.json`

In the "mcpServers" section, add:

```json
"google-thinking": {
    "command": "node",
    "args": ["G:\\MCP02\\dist\\index.js"],
    "env": {
        "GEMINI_API_KEY": "YOUR_GEMINI_API_KEY_HERE"
    }
}
```

Replace "YOUR_GEMINI_API_KEY_HERE" with your actual Gemini API key.

## 2. Using the Google Thinking Generator in Claude

After saving the configuration and restarting Claude Desktop, you can use the Google thinking generator by asking Claude to:

"Show me thinking process using Google for [your complex problem]"

or 

"Resolve this problem using Google thinking: [your complex problem]"

Claude will use the google-thinking MCP server to generate detailed thinking process text based on your prompt.

## Important Notes

1. This implementation uses the experimental `gemini-2.0-flash-thinking-exp-01-21` model, which is only available in the beta API.

2. The model is designed to show its detailed "thinking process" when solving complex problems, which can be useful for:
   - Understanding reasoning steps
   - Getting more detailed explanations
   - Seeing how the model breaks down complex problems

3. If you encounter 400 Bad Request errors, try again with a different prompt as some features may be limited in the experimental model. 